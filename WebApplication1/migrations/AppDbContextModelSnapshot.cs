// <auto-generated />
using BookReviewAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookReviewAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookReviewAPI.Data.Entities.Book", b =>
                {
                    b.Property<int>("Book_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Book_Id"));

                    b.Property<string>("Section")
                    .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Title")
                    .IsRequired()
                         .HasColumnType("character varying");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Book_Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookReviewAPI.Data.Entities.Review", b =>
                {
                    b.Property<int>("Review_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Review_Id"));

                    b.Property<int>("User_Id")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("Book_id")
                        .IsRequired()
                        .HasColumnType("ineteger");

                    b.Property<string>("Book_Title_Auth")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime>("timestamp with time zone")
                       .IsRequired()
                       .HasColumnType("character varying");

                    b.Property<int>("Rating")
                        .IsRequired()
                        .HasColumnType("ineteger");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Review_Id");
                    b.HasIndex("Book_Id");
                    b.HasIndex("User_Id");
                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BookReviewAPI.Data.Entities.User", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("User_Id"));

                    b.Property<string>("User_name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("User_Id");
                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookReviewAPI.Data.Entities.Review", b =>
                {
                    b.HasOne("BookReviewAPI.Data.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookReviewAPI.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
